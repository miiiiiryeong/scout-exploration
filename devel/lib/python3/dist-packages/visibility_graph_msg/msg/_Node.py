# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from visibility_graph_msg/Node.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class Node(genpy.Message):
  _md5sum = "4eb03d0d2ffa90810d74f848bac27460"
  _type = "visibility_graph_msg/Node"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
uint32 id
uint8 FreeType
geometry_msgs/Point position
geometry_msgs/Point[] surface_dirs
bool is_covered
bool is_frontier
bool is_navpoint
bool is_boundary
uint32[] connect_nodes
uint32[] poly_connects
uint32[] contour_connects
uint32[] trajectory_connects
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['header','id','FreeType','position','surface_dirs','is_covered','is_frontier','is_navpoint','is_boundary','connect_nodes','poly_connects','contour_connects','trajectory_connects']
  _slot_types = ['std_msgs/Header','uint32','uint8','geometry_msgs/Point','geometry_msgs/Point[]','bool','bool','bool','bool','uint32[]','uint32[]','uint32[]','uint32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,FreeType,position,surface_dirs,is_covered,is_frontier,is_navpoint,is_boundary,connect_nodes,poly_connects,contour_connects,trajectory_connects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Node, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.FreeType is None:
        self.FreeType = 0
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.surface_dirs is None:
        self.surface_dirs = []
      if self.is_covered is None:
        self.is_covered = False
      if self.is_frontier is None:
        self.is_frontier = False
      if self.is_navpoint is None:
        self.is_navpoint = False
      if self.is_boundary is None:
        self.is_boundary = False
      if self.connect_nodes is None:
        self.connect_nodes = []
      if self.poly_connects is None:
        self.poly_connects = []
      if self.contour_connects is None:
        self.contour_connects = []
      if self.trajectory_connects is None:
        self.trajectory_connects = []
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.FreeType = 0
      self.position = geometry_msgs.msg.Point()
      self.surface_dirs = []
      self.is_covered = False
      self.is_frontier = False
      self.is_navpoint = False
      self.is_boundary = False
      self.connect_nodes = []
      self.poly_connects = []
      self.contour_connects = []
      self.trajectory_connects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IB3d().pack(_x.id, _x.FreeType, _x.position.x, _x.position.y, _x.position.z))
      length = len(self.surface_dirs)
      buff.write(_struct_I.pack(length))
      for val1 in self.surface_dirs:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_4B().pack(_x.is_covered, _x.is_frontier, _x.is_navpoint, _x.is_boundary))
      length = len(self.connect_nodes)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.connect_nodes))
      length = len(self.poly_connects)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.poly_connects))
      length = len(self.contour_connects)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.contour_connects))
      length = len(self.trajectory_connects)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.trajectory_connects))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.surface_dirs is None:
        self.surface_dirs = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.id, _x.FreeType, _x.position.x, _x.position.y, _x.position.z,) = _get_struct_IB3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.surface_dirs = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.surface_dirs.append(val1)
      _x = self
      start = end
      end += 4
      (_x.is_covered, _x.is_frontier, _x.is_navpoint, _x.is_boundary,) = _get_struct_4B().unpack(str[start:end])
      self.is_covered = bool(self.is_covered)
      self.is_frontier = bool(self.is_frontier)
      self.is_navpoint = bool(self.is_navpoint)
      self.is_boundary = bool(self.is_boundary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.connect_nodes = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.poly_connects = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.contour_connects = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.trajectory_connects = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IB3d().pack(_x.id, _x.FreeType, _x.position.x, _x.position.y, _x.position.z))
      length = len(self.surface_dirs)
      buff.write(_struct_I.pack(length))
      for val1 in self.surface_dirs:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_4B().pack(_x.is_covered, _x.is_frontier, _x.is_navpoint, _x.is_boundary))
      length = len(self.connect_nodes)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.connect_nodes.tostring())
      length = len(self.poly_connects)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.poly_connects.tostring())
      length = len(self.contour_connects)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.contour_connects.tostring())
      length = len(self.trajectory_connects)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.trajectory_connects.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.surface_dirs is None:
        self.surface_dirs = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 29
      (_x.id, _x.FreeType, _x.position.x, _x.position.y, _x.position.z,) = _get_struct_IB3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.surface_dirs = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.surface_dirs.append(val1)
      _x = self
      start = end
      end += 4
      (_x.is_covered, _x.is_frontier, _x.is_navpoint, _x.is_boundary,) = _get_struct_4B().unpack(str[start:end])
      self.is_covered = bool(self.is_covered)
      self.is_frontier = bool(self.is_frontier)
      self.is_navpoint = bool(self.is_navpoint)
      self.is_boundary = bool(self.is_boundary)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.connect_nodes = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.poly_connects = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.contour_connects = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.trajectory_connects = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_IB3d = None
def _get_struct_IB3d():
    global _struct_IB3d
    if _struct_IB3d is None:
        _struct_IB3d = struct.Struct("<IB3d")
    return _struct_IB3d
