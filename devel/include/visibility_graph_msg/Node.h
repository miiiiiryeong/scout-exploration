// Generated by gencpp from file visibility_graph_msg/Node.msg
// DO NOT EDIT!


#ifndef VISIBILITY_GRAPH_MSG_MESSAGE_NODE_H
#define VISIBILITY_GRAPH_MSG_MESSAGE_NODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace visibility_graph_msg
{
template <class ContainerAllocator>
struct Node_
{
  typedef Node_<ContainerAllocator> Type;

  Node_()
    : header()
    , id(0)
    , FreeType(0)
    , position()
    , surface_dirs()
    , is_covered(false)
    , is_frontier(false)
    , is_navpoint(false)
    , is_boundary(false)
    , connect_nodes()
    , poly_connects()
    , contour_connects()
    , trajectory_connects()  {
    }
  Node_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , FreeType(0)
    , position(_alloc)
    , surface_dirs(_alloc)
    , is_covered(false)
    , is_frontier(false)
    , is_navpoint(false)
    , is_boundary(false)
    , connect_nodes(_alloc)
    , poly_connects(_alloc)
    , contour_connects(_alloc)
    , trajectory_connects(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _id_type;
  _id_type id;

   typedef uint8_t _FreeType_type;
  _FreeType_type FreeType;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _surface_dirs_type;
  _surface_dirs_type surface_dirs;

   typedef uint8_t _is_covered_type;
  _is_covered_type is_covered;

   typedef uint8_t _is_frontier_type;
  _is_frontier_type is_frontier;

   typedef uint8_t _is_navpoint_type;
  _is_navpoint_type is_navpoint;

   typedef uint8_t _is_boundary_type;
  _is_boundary_type is_boundary;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _connect_nodes_type;
  _connect_nodes_type connect_nodes;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _poly_connects_type;
  _poly_connects_type poly_connects;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _contour_connects_type;
  _contour_connects_type contour_connects;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _trajectory_connects_type;
  _trajectory_connects_type trajectory_connects;





  typedef boost::shared_ptr< ::visibility_graph_msg::Node_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visibility_graph_msg::Node_<ContainerAllocator> const> ConstPtr;

}; // struct Node_

typedef ::visibility_graph_msg::Node_<std::allocator<void> > Node;

typedef boost::shared_ptr< ::visibility_graph_msg::Node > NodePtr;
typedef boost::shared_ptr< ::visibility_graph_msg::Node const> NodeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visibility_graph_msg::Node_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visibility_graph_msg::Node_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::visibility_graph_msg::Node_<ContainerAllocator1> & lhs, const ::visibility_graph_msg::Node_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.FreeType == rhs.FreeType &&
    lhs.position == rhs.position &&
    lhs.surface_dirs == rhs.surface_dirs &&
    lhs.is_covered == rhs.is_covered &&
    lhs.is_frontier == rhs.is_frontier &&
    lhs.is_navpoint == rhs.is_navpoint &&
    lhs.is_boundary == rhs.is_boundary &&
    lhs.connect_nodes == rhs.connect_nodes &&
    lhs.poly_connects == rhs.poly_connects &&
    lhs.contour_connects == rhs.contour_connects &&
    lhs.trajectory_connects == rhs.trajectory_connects;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::visibility_graph_msg::Node_<ContainerAllocator1> & lhs, const ::visibility_graph_msg::Node_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace visibility_graph_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::visibility_graph_msg::Node_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visibility_graph_msg::Node_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visibility_graph_msg::Node_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visibility_graph_msg::Node_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visibility_graph_msg::Node_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visibility_graph_msg::Node_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visibility_graph_msg::Node_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4eb03d0d2ffa90810d74f848bac27460";
  }

  static const char* value(const ::visibility_graph_msg::Node_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4eb03d0d2ffa9081ULL;
  static const uint64_t static_value2 = 0x0d74f848bac27460ULL;
};

template<class ContainerAllocator>
struct DataType< ::visibility_graph_msg::Node_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visibility_graph_msg/Node";
  }

  static const char* value(const ::visibility_graph_msg::Node_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visibility_graph_msg::Node_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint32 id\n"
"uint8 FreeType\n"
"geometry_msgs/Point position\n"
"geometry_msgs/Point[] surface_dirs\n"
"bool is_covered\n"
"bool is_frontier\n"
"bool is_navpoint\n"
"bool is_boundary\n"
"uint32[] connect_nodes\n"
"uint32[] poly_connects\n"
"uint32[] contour_connects\n"
"uint32[] trajectory_connects\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::visibility_graph_msg::Node_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visibility_graph_msg::Node_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.FreeType);
      stream.next(m.position);
      stream.next(m.surface_dirs);
      stream.next(m.is_covered);
      stream.next(m.is_frontier);
      stream.next(m.is_navpoint);
      stream.next(m.is_boundary);
      stream.next(m.connect_nodes);
      stream.next(m.poly_connects);
      stream.next(m.contour_connects);
      stream.next(m.trajectory_connects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Node_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visibility_graph_msg::Node_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visibility_graph_msg::Node_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "FreeType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FreeType);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "surface_dirs[]" << std::endl;
    for (size_t i = 0; i < v.surface_dirs.size(); ++i)
    {
      s << indent << "  surface_dirs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.surface_dirs[i]);
    }
    s << indent << "is_covered: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_covered);
    s << indent << "is_frontier: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_frontier);
    s << indent << "is_navpoint: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_navpoint);
    s << indent << "is_boundary: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_boundary);
    s << indent << "connect_nodes[]" << std::endl;
    for (size_t i = 0; i < v.connect_nodes.size(); ++i)
    {
      s << indent << "  connect_nodes[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.connect_nodes[i]);
    }
    s << indent << "poly_connects[]" << std::endl;
    for (size_t i = 0; i < v.poly_connects.size(); ++i)
    {
      s << indent << "  poly_connects[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.poly_connects[i]);
    }
    s << indent << "contour_connects[]" << std::endl;
    for (size_t i = 0; i < v.contour_connects.size(); ++i)
    {
      s << indent << "  contour_connects[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.contour_connects[i]);
    }
    s << indent << "trajectory_connects[]" << std::endl;
    for (size_t i = 0; i < v.trajectory_connects.size(); ++i)
    {
      s << indent << "  trajectory_connects[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.trajectory_connects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISIBILITY_GRAPH_MSG_MESSAGE_NODE_H
